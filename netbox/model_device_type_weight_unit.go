/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.1 (3.6)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
)

// checks if the DeviceTypeWeightUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceTypeWeightUnit{}

// DeviceTypeWeightUnit struct for DeviceTypeWeightUnit
type DeviceTypeWeightUnit struct {
	// * `kg` - Kilograms * `g` - Grams * `lb` - Pounds * `oz` - Ounces
	Value *string `json:"value,omitempty"`
	Label *string `json:"label,omitempty"`
}

// NewDeviceTypeWeightUnit instantiates a new DeviceTypeWeightUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTypeWeightUnit() *DeviceTypeWeightUnit {
	this := DeviceTypeWeightUnit{}
	return &this
}

// NewDeviceTypeWeightUnitWithDefaults instantiates a new DeviceTypeWeightUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTypeWeightUnitWithDefaults() *DeviceTypeWeightUnit {
	this := DeviceTypeWeightUnit{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DeviceTypeWeightUnit) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTypeWeightUnit) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DeviceTypeWeightUnit) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DeviceTypeWeightUnit) SetValue(v string) {
	o.Value = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DeviceTypeWeightUnit) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTypeWeightUnit) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DeviceTypeWeightUnit) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DeviceTypeWeightUnit) SetLabel(v string) {
	o.Label = &v
}

func (o DeviceTypeWeightUnit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceTypeWeightUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

type NullableDeviceTypeWeightUnit struct {
	value *DeviceTypeWeightUnit
	isSet bool
}

func (v NullableDeviceTypeWeightUnit) Get() *DeviceTypeWeightUnit {
	return v.value
}

func (v *NullableDeviceTypeWeightUnit) Set(val *DeviceTypeWeightUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTypeWeightUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTypeWeightUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTypeWeightUnit(val *DeviceTypeWeightUnit) *NullableDeviceTypeWeightUnit {
	return &NullableDeviceTypeWeightUnit{value: val, isSet: true}
}

func (v NullableDeviceTypeWeightUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTypeWeightUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


