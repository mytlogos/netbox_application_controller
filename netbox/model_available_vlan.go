/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.1 (3.6)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
)

// checks if the AvailableVLAN type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableVLAN{}

// AvailableVLAN Representation of a VLAN which does not exist in the database.
type AvailableVLAN struct {
	Vid int32 `json:"vid"`
	Group NestedVLANGroup `json:"group"`
}

// NewAvailableVLAN instantiates a new AvailableVLAN object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableVLAN(vid int32, group NestedVLANGroup) *AvailableVLAN {
	this := AvailableVLAN{}
	this.Vid = vid
	this.Group = group
	return &this
}

// NewAvailableVLANWithDefaults instantiates a new AvailableVLAN object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableVLANWithDefaults() *AvailableVLAN {
	this := AvailableVLAN{}
	return &this
}

// GetVid returns the Vid field value
func (o *AvailableVLAN) GetVid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vid
}

// GetVidOk returns a tuple with the Vid field value
// and a boolean to check if the value has been set.
func (o *AvailableVLAN) GetVidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vid, true
}

// SetVid sets field value
func (o *AvailableVLAN) SetVid(v int32) {
	o.Vid = v
}

// GetGroup returns the Group field value
func (o *AvailableVLAN) GetGroup() NestedVLANGroup {
	if o == nil {
		var ret NestedVLANGroup
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *AvailableVLAN) GetGroupOk() (*NestedVLANGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *AvailableVLAN) SetGroup(v NestedVLANGroup) {
	o.Group = v
}

func (o AvailableVLAN) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableVLAN) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vid"] = o.Vid
	toSerialize["group"] = o.Group
	return toSerialize, nil
}

type NullableAvailableVLAN struct {
	value *AvailableVLAN
	isSet bool
}

func (v NullableAvailableVLAN) Get() *AvailableVLAN {
	return v.value
}

func (v *NullableAvailableVLAN) Set(val *AvailableVLAN) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableVLAN) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableVLAN) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableVLAN(val *AvailableVLAN) *NullableAvailableVLAN {
	return &NullableAvailableVLAN{value: val, isSet: true}
}

func (v NullableAvailableVLAN) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableVLAN) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


