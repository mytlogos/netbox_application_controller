/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.1 (3.6)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
)

// checks if the NestedCable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NestedCable{}

// NestedCable Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a dictionary of attributes which can be used to uniquely identify the related object. This class should be subclassed to return a full representation of the related object on read.
type NestedCable struct {
	Id int32 `json:"id"`
	Url string `json:"url"`
	Display string `json:"display"`
	Label *string `json:"label,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NestedCable NestedCable

// NewNestedCable instantiates a new NestedCable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedCable(id int32, url string, display string) *NestedCable {
	this := NestedCable{}
	this.Id = id
	this.Url = url
	this.Display = display
	return &this
}

// NewNestedCableWithDefaults instantiates a new NestedCable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedCableWithDefaults() *NestedCable {
	this := NestedCable{}
	return &this
}

// GetId returns the Id field value
func (o *NestedCable) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NestedCable) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NestedCable) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *NestedCable) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *NestedCable) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *NestedCable) SetUrl(v string) {
	o.Url = v
}

// GetDisplay returns the Display field value
func (o *NestedCable) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *NestedCable) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *NestedCable) SetDisplay(v string) {
	o.Display = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *NestedCable) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedCable) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *NestedCable) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *NestedCable) SetLabel(v string) {
	o.Label = &v
}

func (o NestedCable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NestedCable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	// skip: url is readOnly
	// skip: display is readOnly
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NestedCable) UnmarshalJSON(bytes []byte) (err error) {
	varNestedCable := _NestedCable{}

	if err = json.Unmarshal(bytes, &varNestedCable); err == nil {
		*o = NestedCable(varNestedCable)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "display")
		delete(additionalProperties, "label")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNestedCable struct {
	value *NestedCable
	isSet bool
}

func (v NullableNestedCable) Get() *NestedCable {
	return v.value
}

func (v *NullableNestedCable) Set(val *NestedCable) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedCable) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedCable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedCable(val *NestedCable) *NullableNestedCable {
	return &NullableNestedCable{value: val, isSet: true}
}

func (v NullableNestedCable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedCable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


